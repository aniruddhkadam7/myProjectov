package com.raybiztech.expenseManagement.business;

import java.io.Serializable;

import com.raybiztech.appraisals.business.EmpDepartment;
import com.raybiztech.appraisals.business.Employee;
import com.raybiztech.assetmanagement.business.VendorDetails;
import com.raybiztech.date.Date;
import com.raybiztech.projectmanagement.business.Project;
import com.raybiztech.projectmanagement.invoice.lookup.Currency;

public class ExpenseForm implements Serializable,Cloneable{

	
	private static final long serialVersionUID = -8364365657330126487L;
	
	private Long id;
	private String expenseNumber;
	private Employee toEmployee;
	private ExpenseCategory category;
	private ExpenseSubCategory subCategory;
	private EmpDepartment department;
	private Project project;
	private VendorDetails vendor;
	private String purpose;
	private Date expenditureDate;
	private String country;
	private Currency currency;
	private String paymentMode;
	private CreditCard creditCardDetails;
	private String chequeNumber;
	private Date chequeDate;
	private String voucherNumber;
	private String amount;
	private String saltKey;
	private String description;
	private Boolean isReimbursable;
	private String paymentStatus;
	private Employee createdBy;
	private Date createdDate;
	private Employee updatedBy;
	private Date updatedDate;
	private String invoiceNumber;
	private Boolean isAutogenerated;
	
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Employee getToEmployee() {
		return toEmployee;
	}
	public void setToEmployee(Employee toEmployee) {
		this.toEmployee = toEmployee;
	}
	public ExpenseCategory getCategory() {
		return category;
	}
	public void setCategory(ExpenseCategory category) {
		this.category = category;
	}
	public ExpenseSubCategory getSubCategory() {
		return subCategory;
	}
	public void setSubCategory(ExpenseSubCategory subCategory) {
		this.subCategory = subCategory;
	}
	public EmpDepartment getDepartment() {
		return department;
	}
	public void setDepartment(EmpDepartment department) {
		this.department = department;
	}
	public Project getProject() {
		return project;
	}
	public void setProject(Project project) {
		this.project = project;
	}
	public VendorDetails getVendor() {
		return vendor;
	}
	public void setVendor(VendorDetails vendor) {
		this.vendor = vendor;
	}
	public String getPurpose() {
		return purpose;
	}
	public void setPurpose(String purpose) {
		this.purpose = purpose;
	}
	public Date getExpenditureDate() {
		return expenditureDate;
	}
	public void setExpenditureDate(Date expenditureDate) {
		this.expenditureDate = expenditureDate;
	}
	public Currency getCurrency() {
		return currency;
	}
	public void setCurrency(Currency currency) {
		this.currency = currency;
	}
	public String getPaymentMode() {
		return paymentMode;
	}
	public void setPaymentMode(String paymentMode) {
		this.paymentMode = paymentMode;
	}
	public String getChequeNumber() {
		return chequeNumber;
	}
	public void setChequeNumber(String chequeNumber) {
		this.chequeNumber = chequeNumber;
	}
	public Date getChequeDate() {
		return chequeDate;
	}
	public void setChequeDate(Date chequeDate) {
		this.chequeDate = chequeDate;
	}
	public String getVoucherNumber() {
		return voucherNumber;
	}
	public void setVoucherNumber(String voucherNumber) {
		this.voucherNumber = voucherNumber;
	}
	public String getAmount() {
		return amount;
	}
	public void setAmount(String amount) {
		this.amount = amount;
	}
	public String getSaltKey() {
		return saltKey;
	}
	public void setSaltKey(String saltKey) {
		this.saltKey = saltKey;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public Boolean getIsReimbursable() {
		return isReimbursable;
	}
	public void setIsReimbursable(Boolean isReimbursable) {
		this.isReimbursable = isReimbursable;
	}
	public Employee getCreatedBy() {
		return createdBy;
	}
	public void setCreatedBy(Employee createdBy) {
		this.createdBy = createdBy;
	}
	public Date getCreatedDate() {
		return createdDate;
	}
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}
	public Employee getUpdatedBy() {
		return updatedBy;
	}
	public void setUpdatedBy(Employee updatedBy) {
		this.updatedBy = updatedBy;
	}
	public Date getUpdatedDate() {
		return updatedDate;
	}
	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}
	
	public String getExpenseNumber() {
		return expenseNumber;
	}
	public void setExpenseNumber(String expenseNumber) {
		this.expenseNumber = expenseNumber;
	}
	
	public String getCountry() {
		return country;
	}
	
	public void setCountry(String country) {
	this.country = country;
	}
	
	public CreditCard getCreditCardDetails() {
		return creditCardDetails;
	}
	public void setCreditCardDetails(CreditCard creditCardDetails) {
		this.creditCardDetails = creditCardDetails;
	}
	
	public String getPaymentStatus() {
		return paymentStatus;
	}
	public void setPaymentStatus(String paymentStatus) {
		this.paymentStatus = paymentStatus;
	}
    
	public String getInvoiceNumber() {
		return invoiceNumber;
	}
	public void setInvoiceNumber(String invoiceNumber) {
		this.invoiceNumber = invoiceNumber;
	}
	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
	
	@Override
	public String toString() {
		return "ExpenseForm [id=" + id + ", expenseNumber=" + expenseNumber + ", toEmployee=" + toEmployee
				+ ", category=" + category + ", subCategory=" + subCategory + ", department=" + department
				+ ", project=" + project + ", vendor=" + vendor + ", purpose=" + purpose + ", expenditureDate="
				+ expenditureDate + ", country=" + country + ", currency=" + currency + ", paymentMode=" + paymentMode
				+ ", creditCardDetails=" + creditCardDetails + ", chequeNumber=" + chequeNumber + ", chequeDate="
				+ chequeDate + ", voucherNumber=" + voucherNumber + ", amount=" + amount + ", saltKey=" + saltKey
				+ ", description=" + description + ", isReimbursable=" + isReimbursable + ", paymentStatus="
				+ paymentStatus + ", createdBy=" + createdBy + ", createdDate=" + createdDate + ", updatedBy="
				+ updatedBy + ", updatedDate=" + updatedDate + "]";
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result + ((category == null) ? 0 : category.hashCode());
		result = prime * result + ((chequeDate == null) ? 0 : chequeDate.hashCode());
		result = prime * result + ((chequeNumber == null) ? 0 : chequeNumber.hashCode());
		result = prime * result + ((country == null) ? 0 : country.hashCode());
		result = prime * result + ((createdBy == null) ? 0 : createdBy.hashCode());
		result = prime * result + ((createdDate == null) ? 0 : createdDate.hashCode());
		result = prime * result + ((creditCardDetails == null) ? 0 : creditCardDetails.hashCode());
		result = prime * result + ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + ((department == null) ? 0 : department.hashCode());
		result = prime * result + ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((expenditureDate == null) ? 0 : expenditureDate.hashCode());
		result = prime * result + ((expenseNumber == null) ? 0 : expenseNumber.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((isReimbursable == null) ? 0 : isReimbursable.hashCode());
		result = prime * result + ((paymentMode == null) ? 0 : paymentMode.hashCode());
		result = prime * result + ((paymentStatus == null) ? 0 : paymentStatus.hashCode());
		result = prime * result + ((project == null) ? 0 : project.hashCode());
		result = prime * result + ((purpose == null) ? 0 : purpose.hashCode());
		result = prime * result + ((saltKey == null) ? 0 : saltKey.hashCode());
		result = prime * result + ((subCategory == null) ? 0 : subCategory.hashCode());
		result = prime * result + ((toEmployee == null) ? 0 : toEmployee.hashCode());
		result = prime * result + ((updatedBy == null) ? 0 : updatedBy.hashCode());
		result = prime * result + ((updatedDate == null) ? 0 : updatedDate.hashCode());
		result = prime * result + ((vendor == null) ? 0 : vendor.hashCode());
		result = prime * result + ((voucherNumber == null) ? 0 : voucherNumber.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ExpenseForm other = (ExpenseForm) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (category == null) {
			if (other.category != null)
				return false;
		} else if (!category.equals(other.category))
			return false;
		if (chequeDate == null) {
			if (other.chequeDate != null)
				return false;
		} else if (!chequeDate.equals(other.chequeDate))
			return false;
		if (chequeNumber == null) {
			if (other.chequeNumber != null)
				return false;
		} else if (!chequeNumber.equals(other.chequeNumber))
			return false;
		if (country == null) {
			if (other.country != null)
				return false;
		} else if (!country.equals(other.country))
			return false;
		if (createdBy == null) {
			if (other.createdBy != null)
				return false;
		} else if (!createdBy.equals(other.createdBy))
			return false;
		if (createdDate == null) {
			if (other.createdDate != null)
				return false;
		} else if (!createdDate.equals(other.createdDate))
			return false;
		if (creditCardDetails == null) {
			if (other.creditCardDetails != null)
				return false;
		} else if (!creditCardDetails.equals(other.creditCardDetails))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		if (department == null) {
			if (other.department != null)
				return false;
		} else if (!department.equals(other.department))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (expenditureDate == null) {
			if (other.expenditureDate != null)
				return false;
		} else if (!expenditureDate.equals(other.expenditureDate))
			return false;
		if (expenseNumber == null) {
			if (other.expenseNumber != null)
				return false;
		} else if (!expenseNumber.equals(other.expenseNumber))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (isReimbursable == null) {
			if (other.isReimbursable != null)
				return false;
		} else if (!isReimbursable.equals(other.isReimbursable))
			return false;
		if (paymentMode == null) {
			if (other.paymentMode != null)
				return false;
		} else if (!paymentMode.equals(other.paymentMode))
			return false;
		if (paymentStatus == null) {
			if (other.paymentStatus != null)
				return false;
		} else if (!paymentStatus.equals(other.paymentStatus))
			return false;
		if (project == null) {
			if (other.project != null)
				return false;
		} else if (!project.equals(other.project))
			return false;
		if (purpose == null) {
			if (other.purpose != null)
				return false;
		} else if (!purpose.equals(other.purpose))
			return false;
		if (saltKey == null) {
			if (other.saltKey != null)
				return false;
		} else if (!saltKey.equals(other.saltKey))
			return false;
		if (subCategory == null) {
			if (other.subCategory != null)
				return false;
		} else if (!subCategory.equals(other.subCategory))
			return false;
		if (toEmployee == null) {
			if (other.toEmployee != null)
				return false;
		} else if (!toEmployee.equals(other.toEmployee))
			return false;
		if (updatedBy == null) {
			if (other.updatedBy != null)
				return false;
		} else if (!updatedBy.equals(other.updatedBy))
			return false;
		if (updatedDate == null) {
			if (other.updatedDate != null)
				return false;
		} else if (!updatedDate.equals(other.updatedDate))
			return false;
		if (vendor == null) {
			if (other.vendor != null)
				return false;
		} else if (!vendor.equals(other.vendor))
			return false;
		if (voucherNumber == null) {
			if (other.voucherNumber != null)
				return false;
		} else if (!voucherNumber.equals(other.voucherNumber))
			return false;
		return true;
	}
	public Boolean getIsAutogenerated() {
		return isAutogenerated;
	}
	public void setIsAutogenerated(Boolean isAutogenerated) {
		this.isAutogenerated = isAutogenerated;
	}
	
	
	
	
	
}
